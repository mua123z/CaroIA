import CheckWin from "../component/checkWinLost";
import CheckHoa from "../component/checkHoa";
import Bando from "../component/table/table";
import { useState } from "react";
import Thongbao from "../component/thongbao/thongbao";
import SizeTable from "../component/chonSizeTable/sizeTable";
import { Link } from "react-router-dom";

import Ai from "../component/aigoiy/ai";
import Minimax from "../component/aigoiy/minimax";

import style from "./ngvsng.module.css"


function NgvsNg(){
    //kh·ªüi t·∫°o k√≠ch th∆∞·ªõc b√†n c·ªù
    const [row, setRow] = useState(3);
    const [col, setCol] = useState(3);

    //t·∫°o √¥ tr·ªëng b√†n c·ªù
    const [board, setBoard] = useState(
        Array(row).fill().map(() => Array(col).fill(""))
    );

    //ki·ªÉm tra ·∫•n n√∫t start hay ch∆∞a
    const [start, setStart] = useState(0)
    function Start(){
        setStart(start+1)
        console.log(start)
        document.getElementById("start").style.visibility="hidden";
        document.getElementById("luotchoi").style.visibility="visible";
    }

    //thay ƒë·ªïi ng∆∞·ªùi ch∆°i
    const [player, setPlayer] = useState("A")
    //thay ƒë·ªïi l∆∞·ª£t ch∆°i
    const [play, setPlay] = useState("X")

    //l∆∞u ng∆∞·ªùi th·∫Øng
    const [win, setWin] = useState()

    //bi·∫øn thoooonng b√°o
    const [thongbao, setThongBao] = useState("")

    //h√†m reset b√†n c·ªù
    function ResetBoard(){

        setSuggest(null)
        //reset b·∫£ng
        const newBoard = Array(row).fill().map(() => Array(col).fill(""))
        //c·∫≠p nh·∫≠t b·∫£ng
        setBoard(newBoard);
        //l∆∞u b·∫£ng
        setHistory([]);
        
        setPlayer("A")
        setPlay("X")
        // ·∫©n th√¥ng b√°o
        setThongBao("")
        //k cho udo
        notUndoA(false);
        notUndoB(false);
        setKq(false)
    }

    //bi·∫øn l∆∞u b√†n c·ªù ƒë·ªÉ undo
    const [history, setHistory] = useState([]);
    //bi·∫øn ƒë√™ cho ph√©p ch·ªâ undo 1 l·∫ßn
    const [undoA, notUndoA] = useState(false)
    const [undoB, notUndoB] = useState(false)
    //h√†m undo 1 n∆∞·ªõc ƒëi m·ªõi nh·∫•t
    function Undo(){
        if ((player === "A" && undoA) || (player === "B" && undoB)) {
            alert("B·∫°n ch·ªâ c√≥ th·ªÉ Undo n∆∞·ªõc ƒëi c·ªßa ch√≠nh m√¨nh ngay sau khi ƒëi!");
            return;
        }

        if (history.length === 0) {
            alert("Kh√¥ng c√≤n b∆∞·ªõc n√†o ƒë·ªÉ Undo");
            return;
        }

        if(kq){
            alert("V√°n ƒë·∫•u ƒë√£ k·∫øt th√∫c.")
            return;
        }

        // L·∫•y tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
        const lastBoard = history[history.length - 1];
        setBoard(lastBoard);
        setHistory([]);

        // L√πi l·∫°i l∆∞·ª£t ch∆°i
        setPlayer(player === "A" ? "B" : "A");
        setPlay(play === "X" ? "O" : "X");

        // ƒê√°nh d·∫•u ƒë√£ undo
        if (player === "A"){
            notUndoB(true)
        }else {
            notUndoA(true)
        };

        // X√≥a th√¥ng b√°o n·∫øu c√≥
        setThongBao("");
    }

    //bi·∫øn l∆∞u ƒëi·ªÅu ki·ªán th·∫Øng
    const [condition, setCondition] = useState(3)

    //h√†m thay ƒë·ªïi k√≠ch th∆∞·ªõc b√†n c·ªù
    function SizeChange(size){
        //c·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán th·∫Øng
        const newCondition = size === 3 ? 3 : 5;
        setCondition(newCondition);

        //c·∫≠p nh·∫≠t l·∫°i kh√≠ch th∆∞·ªõc
        setRow(size);
        setCol(size);

        // T·∫°o b√†n c·ªù m·ªõi
        const newBoard = Array(size).fill().map(() => Array(size).fill(""));
        setBoard(newBoard)
        // c·∫≠p nh·∫≠t l·∫°i all c√°c tr·∫°ng th√°i
        setHistory([]);
        setThongBao("");
        setKq(false)
    }

    //bi·∫øn higlight qu√¢n c·ªù sau m·ªói n∆∞·ªõc ƒëi
    const [lastMove, setLastMove] = useState(null); // [i, j]

    //bi·∫øn l∆∞u k·∫øt qu·∫£ th·∫Øng thua
    const [kq, setKq] = useState(false)


    //x·ª≠ l√≠ khi b·∫Øt ƒë·∫ßu ch∆°i
    function handleClick(i,j){
        if(kq){
            alert("V√°n ƒë·∫•u ƒë√£ k·∫øt th√∫c.")
            return;
        }
        //ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ·∫•n n√∫t s·∫µn s√†ng ch∆∞a
        if(start!==1){
            alert("H√£y click Start ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i")
        }else if(board[i][j] !==""){
            alert("V·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c ch·ªçn. B·∫°n h√£y ch·ªçn v·ªã tr√≠ kh√°c")
        }else{
            setSuggest(null)

            setLastMove([i, j]);
            const newBoard = board.map((r) => [...r]);
            newBoard[i][j] = play;
            //l∆∞u b√†n c·ªù
            setHistory([board.map(row => [...row])]); // ch·ªâ l∆∞u 1 b∆∞·ªõc g·∫ßn nh·∫•t
            //c·∫≠p nh·∫≠t l·∫°i b√†n c·ªù
            setBoard(newBoard);

            //G·ªåI H√ÄM KI·ªÇM TRA TH·∫ÆNG THUA
            const kiemtra = CheckWin (newBoard, i, j, play, condition)
            if(kiemtra){
                console.log("Ng∆∞·ªùi ch∆°i " + player + " " +"(" + play + ")" + " th·∫Øng");
                setWin(`${player} (${play}) th·∫Øng`)
                setThongBao("win")
                setKq(true)
                return;
            }
            // G·ªåI H√ÄM KI·ªÇM TRA H√íA
            //ki·ªÉm tra h√≤a
            if(CheckHoa(newBoard)){
                setBoard(newBoard);
                console.log("K·∫øt qu·∫£: h√≤a")
                setThongBao("hoa")
                setKq(true)
                return;
            }

            //cho ph√©p ng∆∞·ªùi ch∆°i sau c√πng undo
            if (player === "A") {
                notUndoA(false); // A v·ª´a ƒëi ‚Üí A c√≥ th·ªÉ undo
            } else {
                notUndoB(false); // B v·ª´a ƒëi ‚Üí B c√≥ th·ªÉ undo
            }

            //n·∫øu ch∆∞a th·∫Øng thua ho·∫∑c h√≤a
            //thay ƒë·ªïi ng∆∞·ªùi ch∆°i
            setPlayer(player === "A" ? "B" : "A")
            //thay ƒë·ªïi X, O
            setPlay(play ==="X" ? "O" : "X")
        }
    }

    //bi·∫øn l∆∞u n∆∞·ªõc ƒëi ƒë·ªÅ xu·∫•t c·ªßa AI ƒë·ªÉ higlight
    const[suggest, setSuggest] = useState(null)

    //h√†m m√°y g·ªçi √Ω n∆∞·ªõc ƒëi
    function handleSuggestMove() {
    if (kq) {
        alert("V√°n ƒë·∫•u ƒë√£ k·∫øt th√∫c.");
        return;
    }

    if (start !== 1) {
        alert("H√£y click Start ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i");
        return;
    }

    const suggestion = Ai(board, condition, play); // <-- S·ª≠a d√≤ng n√†y
    if (!suggestion) {
        alert("Kh√¥ng t√¨m ƒë∆∞·ª£c g·ª£i √Ω.");
        return;
    }

    const [i, j] = suggestion;
    // const newBoard = board.map(row => [...row]);
    // //setSuggest(newBoard[i][j] = " ")
    // //newBoard[i][j] ="?";
    // const a = newBoard[i][j] = "?";
    
    // setBoard(newBoard);
    //setSuggest(suggestion)
    setSuggest([i, j])
    //alert(`üëâ G·ª£i √Ω: B·∫°n n√™n ƒëi √¥ h√†ng ${i + 1}, c·ªôt ${j + 1}`);

    // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng highlight n·∫øu mu·ªën
    //setLastMove([i, j]); // d√πng highlight ƒë√£ c√≥ s·∫µn
}


    

    return(
        <div className={`${style.all}`}>
            <div className={`${style.nenmo}`}></div>

            <div className={`${style.ngvsng}`}>
                <div className={`${style.head}`}>
                    <h1>Ng∆∞·ªùi ch∆°i A</h1>
                    <button onClick={Start} id="start">Start</button>
                    <h1>Ng∆∞·ªùi ch∆°i B</h1>
                </div>
                
                <div>
                    <h2 id="luotchoi" style={{visibility:"hidden", color:"rgb(255, 238, 0)"}}>L∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i {player}({play})</h2>
                </div>

                <div className={`${style.body}`}>
                    <SizeTable onSelectSize={SizeChange} className={`${style.cn}`}/>
                    <Bando board={board} onCellClick={handleClick} lastMove={lastMove} suggest={suggest}></Bando>
                    <div className={`${style.cn} d-flex  flex-column`}>
                        <Link to="/">Home</Link>
                        <button onClick={Undo}>Undo</button>
                        <button onClick={handleSuggestMove}>AI g·ª£i √Ω</button>
                        <button onClick={ResetBoard}>Reset game</button>
                    </div>
                </div>

                {thongbao && 
                    <div className={`${style.tb}`}>
                        <Thongbao  tb={thongbao} onReset={ResetBoard} win={win} onClose={()=>{setThongBao("")}}/>
                    </div>
                }
            </div>
        </div>
    )
}

export default NgvsNg;